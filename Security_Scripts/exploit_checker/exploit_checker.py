#!/usr/bin/env python3

import argparse
import json
import sys

# For demo, a simple local dictionary of vulnerable services and CVEs
# Replace or extend this with a real CVE DB or API integration
VULN_DB = {
    "apache httpd 2.4.41": ["CVE-2021-41773", "CVE-2021-42013"],
    "nginx 1.18.0": ["CVE-2021-23017"],
    "openssh 7.4": ["CVE-2018-15473"],
}

def load_scan_data(input_file):
    with open(input_file, 'r') as f:
        data = json.load(f)
    return data

def find_exploits(service_name, version):
    key = f"{service_name.lower()} {version.lower()}"
    return VULN_DB.get(key, [])

def check_services(scan_data):
    results = []

    for host, info in scan_data.items():
        if 'data' not in info:
            continue
        for service in info['data']:
            product = service.get('product')
            version = service.get('version', '')
            port = service.get('port')
            if product and version:
                cves = find_exploits(product, version)
                if cves:
                    results.append({
                        'host': host,
                        'port': port,
                        'service': product,
                        'version': version,
                        'cves': cves
                    })
    return results

def main():
    parser = argparse.ArgumentParser(description="Match discovered services against known CVEs/exploits.")
    parser.add_argument('-i', '--input', required=True, help="Input JSON file with service scan data")
    parser.add_argument('-o', '--output', help="Output JSON file for results (optional)")

    args = parser.parse_args()
    scan_data = load_scan_data(args.input)
    exploits = check_services(scan_data)

    if args.output:
        with open(args.output, 'w') as f:
            json.dump(exploits, f, indent=4)
        print(f"[+] Results saved to {args.output}")
    else:
        print(json.dumps(exploits, indent=4))

if __name__ == "__main__":
    main()
